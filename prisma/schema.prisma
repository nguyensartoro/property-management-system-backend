generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contract {
  id                String         @id
  name              String
  roomId            String
  amount            Float
  securityDeposit   Float?
  status            ContractStatus @default(ACTIVE)
  terminationReason String?
  terminationDate   DateTime?
  document          String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime
  contractType      ContractType   @default(LONG_TERM)
  endDate           DateTime?
  startDate         DateTime?
  Room              Room           @relation(fields: [roomId], references: [id])
  Payment           Payment[]
  Renter            Renter[]       @relation("ContractRenters")
}

model Document {
  id        String       @id
  name      String
  type      DocumentType
  path      String
  renterId  String
  createdAt DateTime     @default(now())
  updatedAt DateTime
  Renter    Renter       @relation(fields: [renterId], references: [id], onDelete: Cascade)
}

model Event {
  id           String         @id
  name         String
  message      String
  description  String?
  eventType    EventType      @default(ONE_TIME)
  scheduleDate DateTime?
  scheduleDay  Int?
  scheduleTime String?
  notifyBy     NotifyMethod[]
  active       Boolean        @default(true)
  lastRun      DateTime?
  nextRun      DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  createdById  String
  User         User           @relation(fields: [createdById], references: [id])
  EventTarget  EventTarget[]
}

model EventTarget {
  id           String    @id
  eventId      String
  roomId       String?
  renterId     String?
  userId       String?
  lastNotified DateTime?
  createdAt    DateTime  @default(now())
  Event        Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  Renter       Renter?   @relation(fields: [renterId], references: [id], onDelete: Cascade)
  Room         Room?     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  User         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, roomId, renterId, userId])
}

model Expense {
  id          String          @id
  name        String
  amount      Float
  date        DateTime
  category    ExpenseCategory
  description String?
  receipt     String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime
}

model MaintenanceEvent {
  id            String              @id
  title         String
  description   String
  status        MaintenanceStatus   @default(PENDING)
  priority      MaintenancePriority @default(MEDIUM)
  roomId        String
  scheduledDate DateTime?
  completedDate DateTime?
  cost          Float?
  notes         String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime
  Room          Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String        @id
  amount        Float
  status        PaymentStatus @default(PENDING)
  type          PaymentType
  dueDate       DateTime
  paidDate      DateTime?
  description   String?
  renterId      String
  contractId    String?
  roomServiceId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  Contract      Contract?     @relation(fields: [contractId], references: [id])
  Renter        Renter        @relation(fields: [renterId], references: [id], onDelete: Cascade)
  RoomService   RoomService?  @relation(fields: [roomServiceId], references: [id])
}

model Permission {
  id             String           @id
  name           String           @unique
  description    String?
  resource       String
  action         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  RolePermission RolePermission[]
}

model Property {
  id        String   @id
  name      String
  address   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Room      Room[]
}

model Renter {
  id               String        @id
  name             String
  email            String?
  phone            String
  emergencyContact String?
  identityNumber   String?
  roomId           String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime
  avatar           String?
  Document         Document[]
  EventTarget      EventTarget[]
  Payment          Payment[]
  Room             Room?         @relation(fields: [roomId], references: [id])
  User             User?
  Contract         Contract[]    @relation("ContractRenters")
}

model Role {
  id             String           @id
  name           String           @unique
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  isDefault      Boolean          @default(false)
  RolePermission RolePermission[]
  UserRole       UserRole[]
}

model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime   @default(now())
  Permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  Role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model Room {
  id               String             @id
  name             String
  number           String
  floor            Int
  size             Int
  description      String?
  status           RoomStatus         @default(AVAILABLE)
  price            Float
  images           String[]
  propertyId       String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  type             String?
  Contract         Contract[]
  EventTarget      EventTarget[]
  MaintenanceEvent MaintenanceEvent[]
  Renter           Renter[]
  Property         Property           @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  RoomService      RoomService[]
}

model RoomService {
  id        String        @id
  roomId    String
  serviceId String
  startDate DateTime      @default(now())
  endDate   DateTime?
  status    ServiceStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime
  Payment   Payment[]
  Room      Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  Service   Service       @relation(fields: [serviceId], references: [id])
}

model Service {
  id          String        @id
  name        String
  description String?
  fee         Float
  feeType     FeeType       @default(ONE_TIME)
  icon        String?
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  RoomService RoomService[]
}

model Subscription {
  id               String             @id
  userId           String             @unique
  planId           String
  status           SubscriptionStatus @default(ACTIVE)
  startDate        DateTime           @default(now())
  endDate          DateTime?
  autoRenew        Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  SubscriptionPlan SubscriptionPlan   @relation(fields: [planId], references: [id])
  User             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubscriptionPlan {
  id           String         @id
  name         String
  description  String
  price        Float
  roomLimit    Int
  billingCycle BillingCycle   @default(MONTHLY)
  features     String[]
  active       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  Subscription Subscription[]
}

model ThemeSettings {
  id          String   @id
  userId      String   @unique
  fontSize    String   @default("medium")
  fontFamily  String   @default("inter")
  colorScheme String   @default("default")
  darkMode    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id
  email          String          @unique
  password       String
  name           String
  avatar         String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  isRenter       Boolean         @default(false)
  renterId       String?         @unique
  Event          Event[]
  EventTarget    EventTarget[]
  Property       Property[]
  Subscription   Subscription?
  ThemeSettings  ThemeSettings?
  Renter         Renter?         @relation(fields: [renterId], references: [id])
  UserPreference UserPreference?
  UserRole       UserRole[]
}

model UserPreference {
  id         String   @id
  userId     String   @unique
  darkMode   Boolean  @default(false)
  fontSize   String   @default("medium")
  colorTheme String   @default("default")
  language   String   @default("en")
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserRole {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  Role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum ContractStatus {
  PENDING
  ACTIVE
  EXPIRED
  TERMINATED
}

enum ContractType {
  LONG_TERM
  SHORT_TERM
}

enum DocumentType {
  ID_CARD
  PASSPORT
  CONTRACT
  OTHER
}

enum EventType {
  ONE_TIME
  MONTHLY
  QUARTERLY
  ANNUALLY
  CONTRACT_EXPIRY
  PAYMENT_DUE
}

enum ExpenseCategory {
  MAINTENANCE
  UTILITIES
  TAXES
  INSURANCE
  SALARY
  SUPPLIES
  MARKETING
  OTHER
}

enum FeeType {
  ONE_TIME
  MONTHLY
  YEARLY
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotifyMethod {
  EMAIL
  ZALO
  SMS
  IN_APP
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentType {
  RENT
  DEPOSIT
  SERVICE
  MAINTENANCE
  OTHER
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  TERMINATED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PENDING
}
