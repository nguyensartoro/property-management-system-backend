datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  password          String
  name              String
  role              Role                @default(USER)
  avatar            String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  properties        Property[]
  subscription      Subscription?
  userPreferences   UserPreference?
}

model UserPreference {
  id                String              @id @default(uuid())
  userId            String              @unique
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  darkMode          Boolean             @default(false)
  fontSize          String              @default("medium")
  colorTheme        String              @default("default")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Subscription {
  id                String              @id @default(uuid())
  userId            String              @unique
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId            String
  plan              SubscriptionPlan    @relation(fields: [planId], references: [id])
  status            SubscriptionStatus  @default(ACTIVE)
  startDate         DateTime            @default(now())
  endDate           DateTime?
  autoRenew         Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model SubscriptionPlan {
  id                String              @id @default(uuid())
  name              String
  description       String
  price             Float
  roomLimit         Int
  billingCycle      BillingCycle        @default(MONTHLY)
  features          String[]
  active            Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  subscriptions     Subscription[]
}

model Property {
  id                String              @id @default(uuid())
  name              String
  address           String
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  rooms             Room[]
}

model Room {
  id                String              @id @default(uuid())
  name              String
  number            String
  floor             Int?
  size              Float?
  description       String?
  status            RoomStatus          @default(AVAILABLE)
  price             Float
  images            String[]
  propertyId        String
  property          Property            @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  renters           Renter[]
  contracts         Contract[]
  maintenanceEvents MaintenanceEvent[]
  roomServices      RoomService[]
}

model Renter {
  id                String              @id @default(uuid())
  name              String
  email             String?
  phone             String
  emergencyContact  String?
  identityNumber    String?
  documents         Document[]
  roomId            String?
  room              Room?               @relation(fields: [roomId], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  contracts         Contract[]
  payments          Payment[]
}

model Document {
  id                String              @id @default(uuid())
  name              String
  type              DocumentType
  path              String
  renterId          String
  renter            Renter              @relation(fields: [renterId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Contract {
  id                String              @id @default(uuid())
  name              String
  renterId          String
  renter            Renter              @relation(fields: [renterId], references: [id], onDelete: Cascade)
  roomId            String
  room              Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)
  startDate         DateTime
  endDate           DateTime
  amount            Float
  securityDeposit   Float?
  isLongTerm        Boolean             @default(true)
  status            ContractStatus      @default(ACTIVE)
  terminationReason String?
  terminationDate   DateTime?
  document          String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  payments          Payment[]
}

model Service {
  id                String              @id @default(uuid())
  name              String
  description       String?
  fee               Float
  feeType           FeeType             @default(ONE_TIME)
  icon              String?
  active            Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  roomServices      RoomService[]
}

model RoomService {
  id                String              @id @default(uuid())
  roomId            String
  room              Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)
  serviceId         String
  service           Service             @relation(fields: [serviceId], references: [id])
  startDate         DateTime            @default(now())
  endDate           DateTime?
  status            ServiceStatus       @default(ACTIVE)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  payments          Payment[]
}

model Payment {
  id                String              @id @default(uuid())
  amount            Float
  status            PaymentStatus       @default(PENDING)
  type              PaymentType
  dueDate           DateTime
  paidDate          DateTime?
  description       String?
  renterId          String
  renter            Renter              @relation(fields: [renterId], references: [id], onDelete: Cascade)
  contractId        String?
  contract          Contract?           @relation(fields: [contractId], references: [id])
  roomServiceId     String?
  roomService       RoomService?        @relation(fields: [roomServiceId], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Expense {
  id                String              @id @default(uuid())
  name              String
  amount            Float
  date              DateTime
  category          ExpenseCategory
  description       String?
  receipt           String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model MaintenanceEvent {
  id                String              @id @default(uuid())
  title             String
  description       String
  status            MaintenanceStatus   @default(PENDING)
  priority          MaintenancePriority @default(MEDIUM)
  roomId            String
  room              Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)
  scheduledDate     DateTime?
  completedDate     DateTime?
  cost              Float?
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
}

enum ContractStatus {
  PENDING
  ACTIVE
  EXPIRED
  TERMINATED
}

enum DocumentType {
  ID_CARD
  PASSPORT
  CONTRACT
  OTHER
}

enum FeeType {
  ONE_TIME
  MONTHLY
  YEARLY
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  TERMINATED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentType {
  RENT
  DEPOSIT
  SERVICE
  MAINTENANCE
  OTHER
}

enum ExpenseCategory {
  MAINTENANCE
  UTILITIES
  TAXES
  INSURANCE
  SALARY
  SUPPLIES
  MARKETING
  OTHER
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PENDING
}

enum BillingCycle {
  MONTHLY
  YEARLY
} 