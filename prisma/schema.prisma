datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  password          String
  name              String
  avatar            String?
  isRenter          Boolean             @default(false)  // Flag to identify if user is a renter
  renterId          String?             @unique          // Reference to Renter if this is a renter account
  renter            Renter?             @relation(fields: [renterId], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  properties        Property[]          // One user can have many properties
  subscription      Subscription?
  userPreferences   UserPreference?
  userRoles         UserRole[]          // Many-to-many relationship with Role
  createdEvents     Event[]             // Events created by this user
  eventTargets      EventTarget[]       // Events targeting this user
}

model Role {
  id          String            @id @default(uuid())
  name        String            @unique
  description String?
  isDefault   Boolean           @default(false)  // Whether this role is assigned by default
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userRoles   UserRole[]        // Many-to-many with User
  permissions RolePermission[]  // Many-to-many with Permission
}

model Permission {
  id          String            @id @default(uuid())
  name        String            @unique
  description String?
  resource    String            // Which resource this permission applies to (rooms, tenants, etc.)
  action      String            // The action allowed (create, read, update, delete, etc.)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  roles       RolePermission[]  // Many-to-many with Role
}

// Junction table for User-Role many-to-many relationship
model UserRole {
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  role        Role              @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId      String
  assignedAt  DateTime          @default(now())

  @@id([userId, roleId])
}

// Junction table for Role-Permission many-to-many relationship
model RolePermission {
  role        Role              @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId      String
  permission  Permission        @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String
  assignedAt  DateTime          @default(now())

  @@id([roleId, permissionId])
}

model UserPreference {
  id                String              @id @default(uuid())
  userId            String              @unique
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  darkMode          Boolean             @default(false)
  fontSize          String              @default("medium")
  colorTheme        String              @default("default")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Subscription {
  id                String              @id @default(uuid())
  userId            String              @unique
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId            String
  plan              SubscriptionPlan    @relation(fields: [planId], references: [id])
  status            SubscriptionStatus  @default(ACTIVE)
  startDate         DateTime            @default(now())
  endDate           DateTime?
  autoRenew         Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model SubscriptionPlan {
  id                String              @id @default(uuid())
  name              String
  description       String
  price             Float
  roomLimit         Int
  billingCycle      BillingCycle        @default(MONTHLY)
  features          String[]
  active            Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  subscriptions     Subscription[]
}

model Property {
  id                String              @id @default(uuid())
  name              String
  address           String
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  rooms             Room[]              // One property can have many rooms
}

model Room {
  id                String              @id @default(uuid())
  name              String
  number            String
  floor             Int?
  size              Float?
  description       String?
  status            RoomStatus          @default(AVAILABLE)
  price             Float
  images            String[]
  propertyId        String              // Each room belongs to exactly one property
  property          Property            @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  renters           Renter[]
  contracts         Contract[]
  maintenanceEvents MaintenanceEvent[]
  roomServices      RoomService[]
  eventTargets      EventTarget[]       // Events targeting this room
}

model Renter {
  id                String              @id @default(uuid())
  name              String
  email             String?
  phone             String
  emergencyContact  String?
  identityNumber    String?
  documents         Document[]
  roomId            String?
  room              Room?               @relation(fields: [roomId], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  contracts         Contract[]
  payments          Payment[]
  eventTargets      EventTarget[]       // Events targeting this renter
  userAccount       User?               // Link to User if this renter has an account
}

model Event {
  id            String           @id @default(uuid())
  name          String
  message       String           @db.Text
  description   String?          @db.Text
  eventType     EventType        @default(ONE_TIME)
  scheduleDate  DateTime?        // For ONE_TIME events
  scheduleDay   Int?             // Day of month for MONTHLY events (1-31)
  scheduleTime  String?          // Time of day for the event (HH:MM format)
  notifyBy      NotifyMethod[]   // Array of notification methods
  active        Boolean          @default(true)
  lastRun       DateTime?        // When the event was last executed
  nextRun       DateTime?        // When the event is scheduled to run next
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  createdBy     User             @relation(fields: [createdById], references: [id])
  createdById   String
  targets       EventTarget[]    // Targets for this event
}

// Junction table for Event targets (can target rooms, renters, or users)
model EventTarget {
  id          String           @id @default(uuid())
  event       Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  // Target can be one of these (only one should be set)
  room        Room?            @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId      String?
  renter      Renter?          @relation(fields: [renterId], references: [id], onDelete: Cascade)
  renterId    String?
  user        User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  // For tracking notifications
  lastNotified DateTime?
  createdAt   DateTime         @default(now())

  @@unique([eventId, roomId, renterId, userId], name: "unique_event_target")
}

model Document {
  id                String              @id @default(uuid())
  name              String
  type              DocumentType
  path              String
  renterId          String
  renter            Renter              @relation(fields: [renterId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Contract {
  id                String              @id @default(uuid())
  name              String
  renterId          String
  renter            Renter              @relation(fields: [renterId], references: [id], onDelete: Cascade)
  roomId            String
  room              Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)
  startDate         DateTime
  endDate           DateTime
  amount            Float
  securityDeposit   Float?
  contractType      ContractType        @default(LONG_TERM)
  status            ContractStatus      @default(ACTIVE)
  terminationReason String?
  terminationDate   DateTime?
  document          String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  payments          Payment[]
}

model Service {
  id                String              @id @default(uuid())
  name              String
  description       String?
  fee               Float
  feeType           FeeType             @default(ONE_TIME)
  icon              String?
  active            Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  roomServices      RoomService[]
}

model RoomService {
  id                String              @id @default(uuid())
  roomId            String
  room              Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)
  serviceId         String
  service           Service             @relation(fields: [serviceId], references: [id])
  startDate         DateTime            @default(now())
  endDate           DateTime?
  status            ServiceStatus       @default(ACTIVE)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  payments          Payment[]
}

model Payment {
  id                String              @id @default(uuid())
  amount            Float
  status            PaymentStatus       @default(PENDING)
  type              PaymentType
  dueDate           DateTime
  paidDate          DateTime?
  description       String?
  renterId          String
  renter            Renter              @relation(fields: [renterId], references: [id], onDelete: Cascade)
  contractId        String?
  contract          Contract?           @relation(fields: [contractId], references: [id])
  roomServiceId     String?
  roomService       RoomService?        @relation(fields: [roomServiceId], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Expense {
  id                String              @id @default(uuid())
  name              String
  amount            Float
  date              DateTime
  category          ExpenseCategory
  description       String?
  receipt           String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model MaintenanceEvent {
  id                String              @id @default(uuid())
  title             String
  description       String
  status            MaintenanceStatus   @default(PENDING)
  priority          MaintenancePriority @default(MEDIUM)
  roomId            String
  room              Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)
  scheduledDate     DateTime?
  completedDate     DateTime?
  cost              Float?
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
}

enum ContractStatus {
  PENDING
  ACTIVE
  EXPIRED
  TERMINATED
}

enum DocumentType {
  ID_CARD
  PASSPORT
  CONTRACT
  OTHER
}

enum FeeType {
  ONE_TIME
  MONTHLY
  YEARLY
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  TERMINATED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentType {
  RENT
  DEPOSIT
  SERVICE
  MAINTENANCE
  OTHER
}

enum ExpenseCategory {
  MAINTENANCE
  UTILITIES
  TAXES
  INSURANCE
  SALARY
  SUPPLIES
  MARKETING
  OTHER
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PENDING
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum ContractType {
  LONG_TERM
  SHORT_TERM
}

enum EventType {
  ONE_TIME
  MONTHLY
  QUARTERLY
  ANNUALLY
  CONTRACT_EXPIRY    // Special type for events tied to contract expiration
  PAYMENT_DUE        // Special type for payment reminders
}

enum NotifyMethod {
  EMAIL
  ZALO
  SMS
  IN_APP
}